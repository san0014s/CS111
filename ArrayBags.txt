import java.util.Random;

public class ArrayBag<T> implements BagInterface<T> {

	private T[] myArray;
	private int totalSize;
	private int currentSize;


	public ArrayBag() {
		myArray =(T[]) new Object[10];
		totalSize = 10;



	}

	public ArrayBag(int size) {
		totalSize = size;
	}

	@Override
	public int getCurrentSize() {
		return currentSize;

	}

	@Override
	public int getMaxSize() {
		return totalSize;

	}

	@Override
	public boolean isEmpty() {
		if(currentSize == 0) {
			return true;
		}
		return false;
	}


	@Override
	public boolean isFull() {
		if(currentSize == totalSize) {
			return true;
		}
		return false;
	}

	@Override
	public void add(T newEntry) {
		if(!isFull()) {
			myArray[currentSize] = newEntry;
			currentSize++;
		}

	}

	@Override
	public T remove() {
		int index = (int) (Math.random()*currentSize);
		T holdingVar = myArray[index];
		myArray[index] = myArray[currentSize-1];
		currentSize--;
		return holdingVar;
	}

	@Override
	public boolean remove(T newEntry) {
		for(int a1 = 0; a1<currentSize; a1++)
			if(myArray[a1].equals(newEntry)) {
				myArray[a1] = myArray[currentSize-1];
				currentSize--;

				return true;
			}
		return false;
	}

	@Override
	public void clear() {
		currentSize = 0;

	}

	@Override
	public int getCountOf(T anEntry) {
		int count = 0;

		for(int i = 0; i < myArray.length; i++)
		{
			if(anEntry.equals(myArray[i]))
			{
				count++;
			}
		}

		return count;
	}
	@Override
	public boolean contains(T anEntry) {
		boolean found = false;

		for (int i = 0; !found && (i < currentSize); i++)
		{
			if(anEntry.equals(myArray[i]))
			{
				found = true;
			}
		}

		return found;
	}
	//[hello, world]
	public String toString() {
		String s= "[";
		for( int j = 0; j < currentSize; j++) {
			s += myArray[j]+", "; 
			
		}
		s = s.substring(0, s.length()- 2);
		s += "]";
		return s;
	}
	
}
